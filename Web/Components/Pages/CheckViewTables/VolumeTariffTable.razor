@using Web.NavigationServices

@inject CheckCalculateService Service
@inject ApiClient ApiClient
@inject ILocalizationService Localizer

@if (_filtered != null && _filtered.Any())
{
    <MudText Typo="Typo.h6">@Localizer["VolumePayments"]</MudText>
    <MudDataGrid T="RecordEditDto" Items="@_filtered"
                 Bordered="true" Dense="true"
                 EditMode="DataGridEditMode.Cell" ReadOnly="false"
                 SortMode="SortMode.None">
        <Columns>
            <PropertyColumn Property="x=>x.Tariff.UtilityGroupName" HeaderStyle="width:auto;" StickyLeft="true" Title="@Localizer["Service"]" Editable="false" />
            <PropertyColumn HeaderStyle="width:20%; min-width:150px;" Property="x=>x.Measure" Title="@Localizer["CurrentMeasure"]" Culture="@_culture"
                            CellClass="visible-input" HeaderClass="visible-input">
                <EditTemplate>
                    <MudNumericField @bind-Value="context.Item.Measure"
                                     Culture="@_culture" Format="0.00##"
                                     HideSpinButtons="true"
                                     Adornment="Adornment.End"
                                     AdornmentText="@context.Item.Tariff.Units"
                                     TextChanged="@(async()=>{ await CommittedItemChanges(context.Item);})"></MudNumericField>
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn HeaderStyle="width:15%;" Property="x=>x.Tariff.Cost" Format="C" Editable="false" Title="@Localizer["Cost"]" />
            <PropertyColumn HeaderStyle="width: 15%" Property="x=>x.Cost" Title="@Localizer["Sum"]" Format="C" StickyRight="true" Editable="false" />
        </Columns>
    </MudDataGrid>
}

@code {


    private CultureInfo _culture = CultureInfo.CurrentCulture;

    [Parameter, EditorRequired]
    public required ICollection<RecordEditDto> Model { get; set; }

    [Parameter, EditorRequired]
    public bool IsZeroCheck { get; set; }

    private IEnumerable<RecordEditDto>? _filtered;

    protected override void OnInitialized()
    {
        if (Model != null)
        {
            Service.OnModelUpdated += DoFiltering;
        }
    }

    protected override void OnParametersSet()
    {
        DoFiltering();
    }

    void DoFiltering()
    {
        if (Model == null)
            return;
        _filtered = Model.Where(x => x.Tariff.TariffType is TariffType.Volume);
        StateHasChanged();
    }

    async Task CommittedItemChanges(RecordEditDto item)
    {
        var result = await ApiClient.Check_PostCalculateAction2Async(item, IsZeroCheck);
        item.Cost = result.Cost;
        item.AdditionalSum = result.AdditionalSum;
        Service.RequestRefresh();
    }
}
