@inject ApiClient ApiClient
@inject ISnackbar Snackbar
@inject ILocalizationService Localizer
@if (Model is not null)
{
    <EditForm Model="@Model" OnValidSubmit="CreateUpdateTariff" Context="editContext">
        <MudDialog Style="width:700px;">
            <TitleContent>
                @if (IsEditMode)
                {
                    <MudText Typo="Typo.h4">@Model.UtilityGroupName</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h4">@Localizer["AddTariff"]</MudText>
                }
            </TitleContent>

            <DialogContent>
                <DataAnnotationsValidator />
                <MudStack>
                    @if (_utilityTypes != null)
                    {
                        <MudSelect T="Guid" @bind-Value="@Model.UtilityGroupId" Placeholder="@Localizer["SelectService"]" ToStringFunc="@_convertToString">
                            @foreach (var item in _utilityTypes)
                            {
                                <MudSelectItem Value="@item.Id" />
                            }
                        </MudSelect>
                    }
                    @if (_loadingError)
                    {
                        <MudText>@Localizer["NoDefaultHome"]</MudText>
                        <MudButton Href="/settings/homes" Variant="Variant.Filled" Color="Color.Primary">@Localizer["GoToSettings"]</MudButton>
                    }
                    else if (_households is not null)
                    {

                        <MudSelect @bind-Value="@Model.HomeId" Label="@Localizer["Home"]">
                            @foreach (var house in _households)
                            {
                                <MudSelectItem Value="house.Id">@house.Name</MudSelectItem>
                            }
                        </MudSelect>
                    }

                    <MudStack Row="true">
                        <MudDatePicker @bind-Date="@Model.StartDate" Context="picker1" Label="@Localizer["StartDate"]" AdornmentColor="Color.Primary" />
                        @*                         <MudDatePicker @bind-Date="@Model.EndDate" For="@(()=> Model.EndDate)" AdornmentColor="Color.Primary" Context="picker2" Label="@Localizer["EndDate"]"/>
                         <MudButton OnClick="(()=>Model.EndDate = null)" Size="Size.Small" Color="Color.Error"
                                                             Style="margin-top:auto; height: 32px;"><i class="fa-solid fa-broom"></i></MudButton>*@

                    </MudStack>


                    <MudText Typo="Typo.body1">
                        @Localizer["SelectTariffType"]
                    </MudText>
                    <MudToggleGroup @bind-Value="@Model.TariffType" Color="Color.Primary" FixedContent
                    SelectionMode="SelectionMode.SingleSelection" Size="Size.Medium">
                        <ChildContent>

                            @foreach (var type in Enum.GetValues<TariffType>())
                            {
                                <MudToggleItem Value="type">
                                    <MudTooltip Text="@Localizer[$"TariffType.{type}.Tooltip"]">
                                        @Localizer[$"TariffType.{type}"]
                                    </MudTooltip>
                                </MudToggleItem>
                            }
                        </ChildContent>
                    </MudToggleGroup>

                    @if (Model.TariffType != TariffType.NotFixedPayment)
                    {
                        <MudNumericField @bind-Value="@Model.Cost"
                        For="@(()=> Model.Cost)"
                        Culture="@_culture"
                        Format="0.00##"
                        Label="@Localizer["Cost"]"
                        HideSpinButtons="true"
                        AdornmentText="@NumberFormatInfo.CurrentInfo.CurrencySymbol"
                        Adornment="Adornment.Start"
                        AdornmentColor="Color.Primary" />
                    }

                    @if (Model.TariffType is TariffType.Meters or TariffType.Volume)
                    {
                        <MudTextField @bind-Value="@Model.Units"
                        For="@(()=> Model.Units)"
                        Label="@Localizer["Units"]" />
                        <MudSwitch @bind-Value="@Model.UseLimits"
                        Label="@Localizer["UseLimits"]"
                        Color="Color.Primary" />
                    }

                    @if (Model is { TariffType: TariffType.Meters or TariffType.Volume, UseLimits: true })
                    {
                        <MudPaper Elevation="5" Class="pa-4">
                            @foreach (var item in Model.Limits)
                            {
                                <MudStack Row="true">
                                    <MudNumericField Format=".##" @bind-Value="@item.Limit"
                                    Label="@Localizer["UpperLimit"]"
                                    Variant="Variant.Filled" Margin="Margin.Dense"
                                    AdornmentText="@Model.Units"
                                    Adornment="Adornment.End" AdornmentColor="Color.Primary" />
                                    <MudNumericField Format="0.00##" @bind-Value="@item.CostAfterLimit"
                                    Label="@Localizer["PriceOverLimit"]"
                                    AdornmentText="@NumberFormatInfo.CurrentInfo.CurrencySymbol"
                                    Adornment="Adornment.Start" AdornmentColor="Color.Primary"
                                    Variant="Variant.Filled" Margin="Margin.Dense" />
                                    @if (Model.Limits.Count > 1)
                                    {
                                        <MudIconButton Icon="fa fa-trash"
                                        Color="Color.Error"
                                        OnClick="(()=> DeleteLimit(item))" />
                                    }
                                    else
                                    {
                                        <MudIconButton Icon="fa fa-trash"
                                        Color="Color.Default" />
                                    }
                                </MudStack>
                            }
                            <MudIconButton Class="align-content-center"
                            Icon="fa fa-plus"
                            Color="Color.Tertiary"
                            OnClick="AddLimit"></MudIconButton>
                        </MudPaper>
                    }

                    @if (Model.TariffType is TariffType.Meters or TariffType.Meters)
                    {
                        var lable = Localizer["UseAdditionalFeeLabel", (string.IsNullOrWhiteSpace(Model.Units) ? Localizer["ForUnit"] : Model.Units)];
                        <MudSwitch @bind-Value="@Model.UseAdditionalFee" Label="@lable" Color="Color.Primary" />

                        @if (Model.UseAdditionalFee)
                        {
                            <MudStack Row="true">
                                <MudTextField @bind-Value="@Model.AdditionalFeeName"
                                Label="@Localizer["AdditionalFeeName"]"
                                Variant="Variant.Filled" Margin="Margin.Dense"
                                AdornmentText="@Model.Units" AdornmentColor="Color.Primary" />
                                <MudNumericField @bind-Value="@Model.AdditionalFeeCost"
                                Format="0.00##"
                                Label="@Localizer["Cost"]"
                                AdornmentText="@NumberFormatInfo.CurrentInfo.CurrencySymbol"
                                Adornment="Adornment.Start" AdornmentColor="Color.Primary"
                                Variant="Variant.Filled" Margin="Margin.Dense"></MudNumericField>
                            </MudStack>
                        }
                    }

                    @if (Model.TariffType is not TariffType.Fixed)
                    {
                        <MudSwitch @bind-Value="@Model.UseFixedPay" Label="@Localizer["UseFixedPayLabel"]" Color="Color.Primary" />

                        @if (Model.UseFixedPay)
                        {
                            <MudStack Row="true">
                                <MudTextField @bind-Value="@Model.FixedPayName"
                                Label="@Localizer["FixedPayName"]"
                                Variant="Variant.Filled" Margin="Margin.Dense"
                                AdornmentText="@Model.Units"></MudTextField>
                                <MudNumericField Format="0.00##" @bind-Value="@Model.FixedPay"
                                Label="@Localizer["Cost"]"
                                AdornmentText="@NumberFormatInfo.CurrentInfo.CurrencySymbol"
                                Adornment="Adornment.Start" AdornmentColor="Color.Primary"
                                Variant="Variant.Filled" Margin="Margin.Dense"></MudNumericField>
                            </MudStack>

                        }
                    }

                    @if (_displayAlert)
                    {
                        <MudPaper Class="pa-4">
                            <MudText Typo="Typo.subtitle2">@Localizer["Error"]</MudText>
                            <MudText Color="@Color.Error">
                                <ValidationSummary />
                                @if (_validationResult is not null)
                                {
                                    @foreach (var item in _validationResult.ValidationErrors)
                                    {
                                        foreach (var field in item.Value)
                                        {
                                            @field
                                        }
                                    }
                                }
                                else
                                {
                                    @_errorMessage
                                }

                            </MudText>
                        </MudPaper>
                    }
                </MudStack>

            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">@Localizer["Cancel"]</MudButton>
                <MudButton Color="Color.Tertiary" ButtonType="ButtonType.Submit">
                    <span>@Localizer[IsEditMode ? "Update" : "Create"]</span>
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}
@code
{



    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid? TariffId { get; set; }

    [Parameter]
    public string? HomeId { get; set; }

    [Parameter]
    public TariffViewDto? Reference { get; set; }

    [Parameter]
    public TariffEditDto? Model { get; set; }

    private bool IsEditMode { get; set; }

    private ICollection<UtilityGroupViewModel>? _utilityTypes;
    private ICollection<HomeViewDto>? _households;

    private CultureInfo _culture = CultureInfo.CurrentCulture;

    bool _displayAlert = false;
    string _errorMessage = string.Empty;
    ValidationResult? _validationResult = default!;

    bool _loadingError = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Reference != null)
        {
            Model = new TariffEditDto()
                {
                    StartDate = Reference.EndDate?.AddDays(1),
                    Limits = new List<LimitEditDto>(),
                    UseLimits = Reference.UseLimits,
                    UseAdditionalFee = Reference.UseAdditionalFee,
                    AdditionalFeeName = Reference.AdditionalFeeName,
                    UseFixedPay = Reference.UseFixedPay,
                    FixedPayName = Reference.FixedPayName,
                    HomeId = Reference.Home.Id,
                    TariffType = Reference.TariffType,
                    Units = Reference.Units,
                    UtilityGroupId = Reference.UtilityGroupId,
                    UtilityGroupName = Reference.UtilityGroupName,
                };
            if (Reference.Limits.Any())
            {
                foreach (var limit in Reference.Limits)
                {
                    Model.Limits.Add(new LimitEditDto() { Limit = limit.Limit });
                }
            }
            else
            {
                Model.Limits.Add(new LimitEditDto());
            }

        }
        else if (TariffId == null)
        {
            Model = new TariffEditDto();
            Model.StartDate = DateTime.Today;
            Model.Limits = new List<LimitEditDto>();
            Model.Limits.Add(new LimitEditDto());
            Model.AdditionalFeeCost = 0;
            Model.FixedPay = 0;

            if (Guid.TryParse(HomeId, out var guid))
            {
                Model.HomeId = guid;
            }
            else
            {
                var defaultHouse = _households.SingleOrDefault(x => x.IsDefault);
                if (defaultHouse is null)
                {
                    _loadingError = true;
                }
                else
                {
                    Model.HomeId = defaultHouse.Id;
                }
            }
        }
        else if (TariffId != null)
        {
            IsEditMode = true;
            Model = await ApiClient.Tariffs_GetForEditAsync(TariffId.Value);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _households = await ApiClient.Home_GetAllAsync();
        _utilityTypes = await ApiClient.Utilities_GetAllAsync();
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    private async Task CreateUpdateTariff(EditContext context)
    {
        try
        {
            var result = await ApiClient.Tariffs_PutAsync(Model!.Id, Model);
            var message = IsEditMode ?
                "TariffUpdatedOk" :
                "TariffAddedOk";
            
            Snackbar.Add(Localizer[message, result.UtilityGroupName], Severity.Success);
            MudDialog.Close(DialogResult.Ok(result));
        }
        catch (ApiException<ValidationResult> ex)
        {
            _displayAlert = true;
            _validationResult = ex.Result;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _displayAlert = true;
        }
    }

    private void AddLimit()
    {
        Model!.Limits.Add(new LimitEditDto() { });
    }

    private void DeleteLimit(LimitEditDto item)
    {
        if (Model!.Limits.Count > 1)
            Model.Limits.Remove(item);

    }

    private async Task<IEnumerable<Guid>> NameAutoComplete(string value, CancellationToken token)
    {
        if (_utilityTypes is null)
        {
            _utilityTypes = await ApiClient.Utilities_GetAllAsync();
        }

        if (string.IsNullOrEmpty(value))
            return _utilityTypes.Select(x => x.Id);

        return _utilityTypes.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(x => x.Id);
    }

    string _convertToString (Guid id)
    {
        return _utilityTypes?.SingleOrDefault(x => x.Id == id)?.Name ?? Localizer["SelectService"];
    }
}