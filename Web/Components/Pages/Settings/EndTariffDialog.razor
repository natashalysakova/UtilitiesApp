@inject ApiClient ApiClient
@inject ILocalizationService Localizer

@if (_model != null)
{
    <MudDialog Style="height:auto;">
        <DialogContent>
            <MudStack Spacing="2">
                <MudText>@Localizer["ConfirmTariffDeactivation"]</MudText>
                <MudText>@Localizer["ConfirmTariffDeactivationHelp"]</MudText>

                <MudDatePicker @bind-Date="@_model.EndDate"
                               For="@(()=> _model.EndDate)"
                               AdornmentColor="Color.Primary"
                               Context="picker2"
                               Label="@Localizer["EndDate"]" />
                <MudCheckBox @bind-Value="@_createNew">
                    @Localizer["ConfirmTariffDeactivationAddNew"]
                </MudCheckBox>
                @if (_errorMessage != null)
                {
                    <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
                }
            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">@Localizer["Cancel"]</MudButton>
            <MudButton Color="@Color.Warning"
                       Variant="Variant.Filled"
                       OnClick="Submit">
                @Localizer["Disable"]
            </MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid? TariffId { get; set; }

    private TariffEditDto? _model;
    private string? _errorMessage = null;
    bool _createNew = true;

    private async Task Submit()
    {
        _errorMessage = null;
        try
        {
            var result = await ApiClient.Tariffs_PutAsync(_model!.Id, _model);
            MudDialog.Close(DialogResult.Ok<bool>(_createNew));
        }
        catch (ApiException ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnParametersSetAsync()
    {
        if (TariffId != null)
        {
            try
            {
                _model = await ApiClient.Tariffs_GetForEditAsync(TariffId.Value);
            }
            catch (ApiException ex)
            {
                _errorMessage = ex.Message;
            }
        }
    }
}