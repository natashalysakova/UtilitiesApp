@inject ApiClient ApiClient

@if (_model != null)
{
    <EditForm Model="@_model" OnValidSubmit="Submit">

        <MudDialog Style="height:auto;">
            <TitleContent>
                @if (IsEditMode)
                {
                    <MudText Typo="Typo.h4">Редагувати</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h4">Додати домівку</MudText>
                }
            </TitleContent>
            <DialogContent>
                <DataAnnotationsValidator />
                <MudStack>
                    <MudTextField @bind-Value="@_model.Name" For="@(()=> _model.Name)" Label="Назва"></MudTextField>
                </MudStack>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">Відміна</MudButton>
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">
                    @if (IsEditMode)
                    {
                        <span>Оновити</span>
                    }
                    else
                    {
                        <span>Створити</span>
                    }
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {


    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid? UtilityId { get; set; }

    private bool IsEditMode { get; set; }


    private UtilityGroupEditModel? _model;
    private string? _errorMessage = null;

    private async Task Submit()
    {
        _errorMessage = null;
        try
        {
            var result = await ApiClient.Utilities_PutAsync(_model!.Id, _model);
            MudDialog.Close(DialogResult.Ok(_model));
        }
        catch (ApiException ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnParametersSetAsync()
    {
        if (UtilityId == null)
        {
            _model = new UtilityGroupEditModel();
        }
        else
        {
            IsEditMode = true;
            try
            {
                _model = await ApiClient.Utilities_GetForEditAsync(UtilityId.Value);
            }
            catch (ApiException ex)
            {
                _errorMessage = ex.Message;
            }
        }
    }
}