@using Web.Clients
@using Web.Extensions;

@page "/settings/tariffs"
@page "/home/{HomeId}/tariffs"

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>



<MudGrid Spacing="4">
    <MudItem xs="12" Class="mt-4">
        <MudButton @onclick="@(()=>ShowCreateDialog())" Variant="Variant.Filled" Color="Color.Primary">Додати тариф</MudButton>
    </MudItem>
    <MudItem xs="12">
        @if (errorMessage != null)
        {
            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
        }
        @if (tariffs is null)
        {
            for (int i = 0; i < 3; i++)
            {
                <MudCard>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                    <MudCardContent>
                        <MudSkeleton Width="30%" Height="42px;" />
                        <MudSkeleton Width="80%" />
                        <MudSkeleton Width="100%" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                        <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                    </MudCardActions>
                </MudCard>
            }
        }
        else
        {
            <MudExpansionPanels>
                <MudExpansionPanel Text="Активні" Expanded="true">
                    <MudTable Class="mb-4" Items="tariffs.CurrentlyActive().OrderBy(x=>x.StartDate)" Hover="true" FixedHeader="true" GroupBy="_groupDefinition"
                              Dense="true" Breakpoint="Breakpoint.Sm" HorizontalScrollbar="false" Elevation="0">
                        <ColGroup>
                            @if (_groupDefinition.Expandable)
                            {
                                <col style="width: 60px;" />
                            }
                            <col style="width: auto;" />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh></MudTh>
                            <MudTh>Послуга</MudTh>
                            <MudTh>Ціна</MudTh>
                            <MudTh>Тип</MudTh>
                            <MudTh>Діє з</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <GroupHeaderTemplate>
                            <MudTh Class="mud-table-cell-custom-group" colspan="9">@($"{context.Key}")</MudTh>
                        </GroupHeaderTemplate>
                        <RowTemplate>
                            <MudTd>
                                <MudTooltip Text="Редагувати">
                                    <MudIconButton Size="Size.Small" Icon="fa fa-edit" OnClick="(()=>ShowEditDialog(context))"></MudIconButton>
                                </MudTooltip>
                            </MudTd>
                            <MudTd DataLabel="Послуга">@context.UtilityGroupName</MudTd>
                            <MudTd DataLabel="Ціна">@context.Cost.ToString("C")</MudTd>
                            @{
                                var type = context.TariffType switch
                                {
                                    TariffType.Fixed => "Фіксований",
                                    TariffType.HouseHoldArea => "За площу",
                                    TariffType.Meters => "Лічильник",
                                    TariffType.Volume => "За обсягом",
                                    TariffType.NotFixedPayment => "Не фіксований",
                                    _ => string.Empty
                                };
                            }
                            <MudTd DataLabel="Тип">@type</MudTd>
                            <MudTd DataLabel="Діє">@context.StartDate.ToShortDateString() @context.EndDate?.ToShortDateString()</MudTd>

                            <MudTd>
                                @*                                 <MudTooltip Text="Видалити">
                                    <MudIconButton Size="Size.Small" Icon="fa fa-trash" Color="Color.Error"
                                                   OnClick="(()=>ShowDeleteModal(context))"></MudIconButton>
                                </MudTooltip> *@
                                <MudTooltip Text="Деактивувати">
                                    <MudIconButton Size="Size.Small" Icon="fa-solid fa-hourglass-end" Color="Color.Tertiary"
                                                   OnClick="(()=>ShowDeactivateModal(context))"></MudIconButton>
                                </MudTooltip>
                            </MudTd>
                        </RowTemplate>
                        <GroupFooterTemplate>
                            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="9">Всього до оплати: @context.Items.Count() послуг</MudTh>
                        </GroupFooterTemplate>
                    </MudTable>
                </MudExpansionPanel>
                <MudExpansionPanel Text="Неактивні" Expanded="false">
                    <MudTable Class="mb-4" Items="tariffs.CurrentlyNotActive().OrderBy(x=>x.StartDate)" Hover="true" FixedHeader="true" GroupBy="_groupDefinitionNotActive"
                              Dense="true" Breakpoint="Breakpoint.Sm" HorizontalScrollbar="false" Elevation="0">
                        <ColGroup>
                            @if (_groupDefinition.Expandable)
                            {
                                <col style="width: 60px;" />
                            }
                            <col style="width: auto;" />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh></MudTh>
                            <MudTh></MudTh>

                            <MudTh>Послуга</MudTh>
                            <MudTh>Ціна</MudTh>
                            <MudTh>Тип</MudTh>
                            <MudTh>Початок дії</MudTh>
                            <MudTh>Кінець дії</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <GroupHeaderTemplate>
                            <MudTh Class="mud-table-cell-custom-group" colspan="9">@($"{context.Key}")</MudTh>
                        </GroupHeaderTemplate>
                        <RowTemplate>
                            <MudTd>
                                <MudTooltip Text="Редагувати">
                                    <MudIconButton Size="Size.Small" Icon="fa fa-edit" OnClick="(()=>ShowEditDialog(context))"></MudIconButton>
                                </MudTooltip>
                            </MudTd>
                            <MudTd DataLabel="Послуга">@context.UtilityGroupName</MudTd>
                            <MudTd DataLabel="Ціна">@context.Cost.ToString("C")</MudTd>
                            @{
                                var type = context.TariffType switch
                                {
                                    TariffType.Fixed => "Фіксований",
                                    TariffType.HouseHoldArea => "За площу",
                                    TariffType.Meters => "Лічильник",
                                    TariffType.Volume => "За обсягом",
                                    TariffType.NotFixedPayment => "Не фіксований",
                                    _ => string.Empty
                                };
                            }
                            <MudTd DataLabel="Тип">@type</MudTd>
                            <MudTd DataLabel="Діє">@context.StartDate.ToShortDateString()</MudTd>
                            <MudTd DataLabel="Діє">@context.EndDate?.ToShortDateString()</MudTd>
                            <MudTd>
                                @*<MudTooltip Text="Видалити">
                                    <MudIconButton Size="Size.Small" Color="Color.Error"
                                                   Icon="fa fa-trash"
                                                   OnClick="(()=>ShowDeleteModal(context))"></MudIconButton>
                                </MudTooltip> *@
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    </MudItem>
</MudGrid>


@code {
    @inject ApiClient apiClient ;
    @inject IDialogService DialogService
    @inject ISnackbar Snackbar

    private ICollection<TariffViewDto>? tariffs;

    [Parameter]
    public string? HomeId { get; set; }

    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        await ReloadTariffs();

    }

    private async Task ReloadTariffs()
    {
        try
        {
            if (Guid.TryParse(HomeId, out var guid))
            {
                tariffs = await apiClient.Tariffs_GetAllAsync(guid);
            }
            else
            {
                tariffs = await apiClient.Tariffs_GetAllAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task ShowCreateDialog(TariffViewDto? model = null)
    {
        var options = new DialogOptions() { BackdropClick = false, MaxWidth = MaxWidth.Large, Position = DialogPosition.TopCenter };
        var parameters = new DialogParameters<AddTariffDialog>
        {
            { x => x.HomeId, HomeId},
            { x=>x.Reference,  model}
        };
        var dialog = await DialogService.ShowAsync<AddTariffDialog>("Створити тариф", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await ReloadTariffs();
        }

    }

    private async Task ShowEditDialog(TariffViewDto tariff)
    {
        var parameters = new DialogParameters<AddTariffDialog> { { x => x.TariffId, tariff.Id } };
        var options = new DialogOptions() { BackdropClick = false, MaxWidth = MaxWidth.Large, Position = DialogPosition.TopCenter };
        var dialog = await DialogService.ShowAsync<AddTariffDialog>("Редагування", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await ReloadTariffs();
        }

    }

    private async Task ShowDeactivateModal(TariffViewDto tariff)
    {
        var parameters = new DialogParameters<EndTariffDialog> { { x => x.TariffId, tariff.Id } };
        var options = new DialogOptions() { BackdropClick = false, Position = DialogPosition.Center };
        var dialog = await DialogService.ShowAsync<EndTariffDialog>("Деактивувати тариф", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await ReloadTariffs();

            if (result.Data != null && (bool)result.Data == true)
            {
                await ShowCreateDialog(tariff);
            }
        }
    }


    private async Task ShowDeleteModal(TariffViewDto type)
    {
        var parameters = new DialogParameters<SimpleDialog_Template>
        {
            { x => x.ContentText, "Ви дійсно хочете видалити цей тариф? Усі пов'язані перевірки також будуть видалені. Цей процес не можна скасувати." },
            { x => x.ButtonText, "Видалити" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<SimpleDialog_Template>("Видалити", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            try
            {
                await apiClient.Tariffs_DeleteAsync(type.Id);
                this.Snackbar.Add($"Тариф {type.UtilityGroupName} ({type.Home.Name}) видалено", Severity.Success);
                await ReloadTariffs();
            }
            catch (ApiException ex)
            {
                this.Snackbar.Add($"Failed to delete tariff {type.UtilityGroupName}. {ex.Message}", Severity.Error);
            }
        }
    }

    private TableGroupDefinition<TariffViewDto> _groupDefinition = new()
        {
            GroupName = "Тарифи",
            Indentation = true,
            Expandable = true,
            IsInitiallyExpanded = true,
            Selector = (e) => e.Home.Name
        };

    private TableGroupDefinition<TariffViewDto> _groupDefinitionNotActive = new()
        {
            GroupName = "Тарифи",
            Indentation = true,
            Expandable = false,
            Selector = (e) => e.Home.Name,
            InnerGroup = new TableGroupDefinition<TariffViewDto>()
            {
                GroupName = "Послуга",
                Indentation = false,
                Expandable = true,
                IsInitiallyExpanded = false,
                Selector = (e) => e.UtilityGroupName
            }
        };
}